info: 
  title: CRUD-API
  version: 1.0.0
openapi: 3.0.0
servers:
  - url: 'http://crud-api'
paths:
  /table/records/{table}:
    get:
      summary: Fetch records from table
      description: Fetch records from table, based on given table name
      responses:
        '200':
          $ref: '#/components/responses/list-table'
      parameters:
        - name: table
          in: path
          required: true
          schema:
            type: string
            minimum: 2
        - name: filter
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: 'Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1'
        - name: include
          in: query
          required: false
          schema:
            type: string
          description: 'Columns you want to include in the output (comma separated). Example: posts.*,categories.name'
        - name: exclude
          in: query
          required: false
          schema:
            type: string
          description: 'Columns you want to exclude from the output (comma separated). Example: posts.content'
        - name: order
          in: query
          required: false
          schema:
            type: string
          description: 'Column you want to sort on and the sort direction (comma separated). Example: id,desc'
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Maximum number of results (for top lists). Example: 10'   
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: 'Page number and page size (comma separated). Example: 1,10'
        - name: join
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: 'Paths (comma separated) to related entities that you want to include. Example: comments,users'
    post:
      summary: Create a record
      description: Create a record for the chosen table, baed on given table name
      responses:
        '200':
          description: Record creation successful
      parameters:
        - name: table
          in: path
          required: true
          schema:
            type: string
            minimum: 2
      requestBody:
        $ref: '#/components/requestBodies/create-record'
  /table/records/{table}/{id}:
    get:
      summary: Fetch a record
      description: Fetch a record from table, based on given table name and record ID
      responses:
        '200':
          description: Fetch successful
      parameters:
        - name: table
          in: path
          required: true
          schema:
            type: string
            minimum: 2
        - name: id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
        - name: include
          in: query
          required: false
          schema:
            type: string
          description: 'Columns you want to include in the output (comma separated). Example: posts.*,categories.name'
        - name: exclude
          in: query
          required: false
          schema:
            type: string
          description: 'Columns you want to exclude from the output (comma separated). Example: posts.content'
        - name: join
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: 'Paths (comma separated) to related entities that you want to include. Example: comments,users'
    put:
      summary: Update a record
      description: Update a record of a table, based on given table name and record primary key
      responses:
        '200':
          description: Update successful
      parameters:
        - name: table
          in: path
          required: true
          schema: 
            type: string
            minimum: 2
        - name: id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        $ref: '#/components/requestBodies/create-record'
    delete:
      summary: Remove a record
      description: Remove a specified record form the given table
      responses:
        '200':
          description: Record removed
      parameters:
        - name: table
          in: path
          required: true
          schema:
            type: string
            minimum: 2
        - name: id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
  /procedure/{storedproc}:
    post:
      description: Fetch results from MySQL stored procedure
      summary: Fetch result from stored procedure, given the procedure name in the path
      parameters:
        - in: path
          name: storedproc
          required:  true
          description:  Name of stored procedure
          schema:
            type:  string
      responses:
        '200':
          description: Stored procedure requested successfully
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              
        
components:
  schemas:
    create-record:
      type: object
      properties:
        id: 
          type: string
          x-primary-key: true
        name:
          type: string
          nullable: true
  responses:
    list-table:
      description: list of {table} records
  requestBodies:
    create-record:
      description: Create a single record
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/create-record'
        application/json:
          schema:
            $ref: '#/components/schemas/create-record'